<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:f="http://xmlns.jcp.org/jsf/core">

<ui:composition template="/WEB-INF/templates/default.xhtml">

	<ui:define name="content">
		<div class="section no-pad-top">

			<!-- First header section, displaying the current page. -->
			<div class="section #{style.colorPrimaryBase}">
				<h1 class="header center #{style.textColorPrimary}">Modify Vote
					Group</h1>
			</div>

			<!-- Second header section, with the vote group name, picture, and edit buttons -->
			<div class="section light-blue darken-2">
				<h:panelGroup id="voteGroupInfo">
					<h:form id="voteGroupEditForm" enctype="multipart/form-data">

						<!-- This fragment is shown if a vote group was supplied in the URL -->
						<ui:fragment
							rendered="#{ModifyVoteGroupController.voteGroup != null}">
							<div class="row">

								<!-- This column contains the card for the vote group image. -->
								<div class="col s2">
									<div class="card">
										<div class="card-image" style="padding: 10px">
											<h:graphicImage
												value="/resources/votegroup_images/#{ModifyVoteGroupController.voteGroup.pictureFileName}" />
										</div>
									</div>
								</div>

								<!-- This column contains the vote group name and edit buttons -->
								<div class="col s6">

									<!-- This fragment is shown if we are not editing the vote group -->
									<ui:fragment
										rendered="#{not ModifyVoteGroupController.editingVoteGroup}">
										<h5 class="header #{style.textColorPrimary} left-align">Vote
											Group Name: #{ModifyVoteGroupController.voteGroup.name}</h5>
										<h:commandLink
											styleClass="waves-effect waves-light btn #{style.colorPrimary}"
											action="#{ModifyVoteGroupController.startVoteGroupEditing}">
											Change Name / Picture
											<i class="material-icons right">mode_edit</i>
											<f:ajax render=":voteGroupInfo" />
										</h:commandLink>
									</ui:fragment>

									<!-- This fragment is shown if we are editing the vote group -->
									<ui:fragment
										rendered="#{ModifyVoteGroupController.editingVoteGroup}">

										<!-- This first row contains the field for editing the name -->
										<div class="row">
											<div class="col s8 input-field white-text">
												<h:outputLabel class="active" for="voteGroupName">
												Vote Group Name
											</h:outputLabel>
												<h:inputText id="voteGroupName"
													value="#{ModifyVoteGroupController.editableVoteGroupName}"></h:inputText>
											</div>
										</div>

										<!-- This second row contains the buttons for uploading images and saving. -->
										<div class="row">

											<!-- Upload Image Button -->
											<div class="col s5">
												<div class="file-field input-field">
													<label
														class="waves-effect waves-light btn #{style.colorPrimary} white-text"
														style="display: inline-block; cursor: pointer;">
														Upload Image <i class="material-icons">perm_media</i> <h:inputFile
															id="fileUploadField"
															value="#{ModifyVoteGroupController.pictureUpload}"
															style="display:none;">
															<f:validator validatorId="ImageFileValidator" />
															<f:ajax execute="fileUploadField"
																listener="#{ModifyVoteGroupController.uploadVoteGroupImage}" />
														</h:inputFile>
													</label>
												</div>
											</div>

											<!-- Save Changes Button -->
											<div class="col s4">
												<h:commandLink
													styleClass="waves-effect waves-light btn #{style.colorPrimary}"
													action="#{ModifyVoteGroupController.applyVoteGroupChanges}">
													Done
													<i class="material-icons right">done</i>
													<f:ajax execute="voteGroupName" render=":voteGroupInfo" />
												</h:commandLink>
											</div>
										</div>

									</ui:fragment>
								</div>
							</div>
						</ui:fragment>

						<!-- This fragment is shown if no vote group was supplied in the URL -->
						<ui:fragment
							rendered="#{ModifyVoteGroupController.voteGroup == null}">
							<h5 class="header center #{style.textColorPrimary}">No Vote
								Group Selected for Editing!</h5>
						</ui:fragment>
					</h:form>
				</h:panelGroup>
			</div>
			<br />

			<div class="container">

				<!-- This row contains the buttons at the top of the page, under the header. -->
				<div class="row">
					<h:form>

						<!-- Add New Contestant Button -->
						<div class="col s6">
							<h:commandLink value="Add New Contestant"
								styleClass="waves-effect waves-light btn #{style.colorPrimary}"
								action="#{ModifyVoteGroupController.addNewContestant}">
								<i class="material-icons right">add</i>
								<f:ajax render=":contestants" />
							</h:commandLink>
						</div>

						<!-- Delete All Contestants Button -->
						<div class="col s6">
							<h:commandLink value="Delete All Contestants"
								styleClass="waves-effect waves-light btn #{style.colorDelete} right"
								action="#{ModifyVoteGroupController.deleteAllContestants}">
								<i class="material-icons right">delete</i>
								<f:ajax render=":contestants" />
							</h:commandLink>
						</div>
					</h:form>
				</div>

				<!-- This panel group contains the cards for each contestant -->
				<h:panelGroup id="contestants">

					<!-- We only show the cards (and ui:repeat) if the voteGroup is not null. -->
					<ui:fragment
						rendered="#{ModifyVoteGroupController.voteGroup != null}">

						<!-- We only use one row; the cards will overflow to the next row automatically. -->
						<div class="row">

							<!-- Iterate over the contestants of the voteGroup -->
							<ui:repeat
								value="#{ModifyVoteGroupController.voteGroup.contestants}"
								var="contestant">

								<!-- Since we use s3, which is 1/4 of 12, we can fit 4 cards on each row. -->
								<div class="col s3">

									<!-- We force the card to be 450px tall. -->
									<div class="card" style="height: 450px">
										<h:form id="contestantEditForm" enctype="multipart/form-data">

											<!-- This displays the image of the contestant. -->
											<div class="card-image">
												<h:graphicImage
													value="/resources/contestant_images/#{contestant.pictureFileName}" />
											</div>

											<!-- This section contains the name of the contestant & fields to edit it. -->
											<div class="card-content">

												<!-- Rendered if the Contestant currently being edited is not this Contestant. -->
												<ui:fragment
													rendered="#{ModifyVoteGroupController.contestantIdBeingEdited != contestant.id}">
													<span class="card-title">#{contestant.firstName}
														#{contestant.lastName}</span>
												</ui:fragment>

												<!-- Rendered if the Contestant currently being edited IS this Contestant. -->
												<ui:fragment
													rendered="#{ModifyVoteGroupController.contestantIdBeingEdited == contestant.id}">
													<div class="input-field col s6">
														<h:inputText id="firstNameTextField"
															value="#{ModifyVoteGroupController.editableFirstName}" />
													</div>
													<div class="input-field col s6">
														<h:inputText id="lastNameTextField"
															value="#{ModifyVoteGroupController.editableLastName}" />
													</div>
												</ui:fragment>

											</div>

											<!-- This section contains the edit, image upload, and delete buttons -->
											<div class="card-action">

												<!-- Rendered if the Contestant currently being edited is not this Contestant. -->
												<ui:fragment
													rendered="#{ModifyVoteGroupController.contestantIdBeingEdited != contestant.id}">
													<h:commandLink class="#{style.colorPrimaryText}"
														action="#{ModifyVoteGroupController.onEditButtonFired(contestant.id)}">
														<i class="material-icons">mode_edit</i>
														<f:ajax render=":contestants" />
													</h:commandLink>
													<h:commandLink class="#{style.colorDeleteText} right"
														action="#{ModifyVoteGroupController.deleteContestant(contestant.id)}">
														<i class="material-icons">delete</i>
														<f:ajax render=":contestants" />
													</h:commandLink>
												</ui:fragment>

												<!-- Rendered if the Contestant currently being edited IS this Contestant. -->
												<ui:fragment
													rendered="#{ModifyVoteGroupController.contestantIdBeingEdited == contestant.id}">

													<!-- Done button -->
													<h:commandLink class="#{style.colorPrimaryText}"
														action="#{ModifyVoteGroupController.onEditDoneButtonFired}">
														<i class="material-icons">done</i>
														<f:ajax execute="firstNameTextField lastNameTextField"
															render=":contestants" />
													</h:commandLink>

													<!-- Upload image button -->
													<label
														class="#{style.colorPrimaryText} file-field input-field"
														style="display: inline-block; cursor: pointer;"> <h:inputFile
															id="fileUploadField"
															value="#{ModifyVoteGroupController.pictureUpload}"
															style="display:none;">
															<f:validator validatorId="ImageFileValidator" />
															<f:ajax execute="fileUploadField"
																listener="#{ModifyVoteGroupController.uploadContestantImage}" />
														</h:inputFile> <i class="material-icons">perm_media</i>
													</label>

													<!-- Error messages -->
													<h:message for="contestantEditForm" style="color: red" />

													<!-- Display this if we ever get render working on file upload ajax <h:message for="fileUploadField" style="color: red" /> -->
												</ui:fragment>

											</div>
										</h:form>
									</div>
								</div>
							</ui:repeat>
						</div>
					</ui:fragment>
				</h:panelGroup>
			</div>
		</div>
	</ui:define>
</ui:composition>
</html>
